diff --git a/Greeting b/Greeting
new file mode 100755
index 0000000..e302a44
--- /dev/null
+++ b/Greeting
@@ -0,0 +1 @@
+mvn exec:java -Dexec.mainClass=com.paulojeronimo.web3j.Greeting -Dexec.args="web3jtest"
diff --git a/src/main/java/com/paulojeronimo/web3j/Greeting.java b/src/main/java/com/paulojeronimo/web3j/Greeting.java
new file mode 100644
index 0000000..b533ee5
--- /dev/null
+++ b/src/main/java/com/paulojeronimo/web3j/Greeting.java
@@ -0,0 +1,44 @@
+package com.paulojeronimo.web3j;
+
+import java.io.IOException;
+import java.math.BigInteger;
+import java.util.concurrent.ExecutionException;
+
+import org.web3j.abi.datatypes.Utf8String;
+import org.web3j.crypto.CipherException;
+import org.web3j.crypto.Credentials;
+import org.web3j.crypto.WalletUtils;
+import org.web3j.protocol.Web3j;
+import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.protocol.http.HttpService;
+import org.web3j.tx.Contract;
+import org.web3j.tx.ManagedTransaction;
+
+import com.paulojeronimo.web3j.generated.Greeter;
+
+public class Greeting {
+    public static void main(String[] args) throws IOException, CipherException, ExecutionException, InterruptedException {
+        String walletFilePassword = args[0];
+
+        Web3j web3j = Web3j.build(new HttpService());
+
+        String walletId = "6284623006d42a13050a90e343352f7e8b39ecb5";
+        String walletSource = "/home/ubuntu/.ethereum/testnet/keystore/UTC--2017-11-11T03-10-00.267000000Z--" + walletId + ".json";
+
+        Credentials credentials = WalletUtils.loadCredentials(walletFilePassword, walletSource);
+
+        Greeter contract = Greeter.deploy(
+                web3j, credentials, ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT,
+                BigInteger.ZERO, new Utf8String("Greetings to the blockchain world from Paulo Jeronimo!")).get();
+
+        Utf8String greeting = contract.greet().get();
+        System.out.println(greeting.getValue());
+
+        TransactionReceipt transactionReceipt =
+                contract.newGreeting(new Utf8String("new Greeting from Paulo Jeronimo!")).get();
+        System.out.println(transactionReceipt.getTransactionHash());
+
+        Utf8String newGreeting = contract.greet().get();
+        System.out.println(newGreeting.getValue());
+    }
+}
diff --git a/src/main/java/com/paulojeronimo/web3j/generated/Greeter.java b/src/main/java/com/paulojeronimo/web3j/generated/Greeter.java
new file mode 100644
index 0000000..2eaf7ad
--- /dev/null
+++ b/src/main/java/com/paulojeronimo/web3j/generated/Greeter.java
@@ -0,0 +1,70 @@
+package com.paulojeronimo.web3j.generated;
+
+import java.math.BigInteger;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.concurrent.Future;
+import org.web3j.abi.FunctionEncoder;
+import org.web3j.abi.TypeReference;
+import org.web3j.abi.datatypes.Function;
+import org.web3j.abi.datatypes.Type;
+import org.web3j.abi.datatypes.Utf8String;
+import org.web3j.crypto.Credentials;
+import org.web3j.protocol.Web3j;
+import org.web3j.protocol.core.methods.response.TransactionReceipt;
+import org.web3j.tx.Contract;
+import org.web3j.tx.TransactionManager;
+
+/**
+ * Auto generated code.<br>
+ * <strong>Do not modify!</strong><br>
+ * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
+ *
+ * <p>Generated with web3j version 2.3.1.
+ */
+public final class Greeter extends Contract {
+    private static final String BINARY = "6060604052341561000f57600080fd5b60405161042c38038061042c8339810160405280805160008054600160a060020a03191633600160a060020a03161790559190910190506001818051610059929160200190610060565b50506100fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a157805160ff19168380011785556100ce565b828001600101855582156100ce579182015b828111156100ce5782518255916020019190600101906100b3565b506100da9291506100de565b5090565b6100f891905b808211156100da57600081556001016100e4565b90565b6103228061010a6000396000f3006060604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b5811461005b5780634ac0d66e14610070578063cfae3217146100c1575b600080fd5b341561006657600080fd5b61006e61014b565b005b341561007b57600080fd5b61006e60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061018c95505050505050565b34156100cc57600080fd5b6100d46101a3565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101105780820151838201526020016100f8565b50505050905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116141561018a5760005473ffffffffffffffffffffffffffffffffffffffff16ff5b565b600181805161019f92916020019061024c565b5050565b6101ab6102ca565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102415780601f1061021657610100808354040283529160200191610241565b820191906000526020600020905b81548152906001019060200180831161022457829003601f168201915b505050505090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028d57805160ff19168380011785556102ba565b828001600101855582156102ba579182015b828111156102ba57825182559160200191906001019061029f565b506102c69291506102dc565b5090565b60206040519081016040526000815290565b61024991905b808211156102c657600081556001016102e25600a165627a7a72305820b7c5c5cd2977813330d6a24a1f86b9cbb6663c5dcb81e5fa4ea4cc57ba74b9f20029";
+
+    private Greeter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
+        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
+    }
+
+    private Greeter(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
+        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
+    }
+
+    public Future<TransactionReceipt> kill() {
+        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
+        return executeTransactionAsync(function);
+    }
+
+    public Future<TransactionReceipt> newGreeting(Utf8String _greeting) {
+        Function function = new Function("newGreeting", Arrays.<Type>asList(_greeting), Collections.<TypeReference<?>>emptyList());
+        return executeTransactionAsync(function);
+    }
+
+    public Future<Utf8String> greet() {
+        Function function = new Function("greet", 
+                Arrays.<Type>asList(), 
+                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
+        return executeCallSingleValueReturnAsync(function);
+    }
+
+    public static Future<Greeter> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _greeting) {
+        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_greeting));
+        return deployAsync(Greeter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
+    }
+
+    public static Future<Greeter> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _greeting) {
+        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_greeting));
+        return deployAsync(Greeter.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
+    }
+
+    public static Greeter load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
+        return new Greeter(contractAddress, web3j, credentials, gasPrice, gasLimit);
+    }
+
+    public static Greeter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
+        return new Greeter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
+    }
+}
diff --git a/src/main/resources/Greeter.sol b/src/main/resources/Greeter.sol
new file mode 100644
index 0000000..29a954a
--- /dev/null
+++ b/src/main/resources/Greeter.sol
@@ -0,0 +1,21 @@
+pragma solidity ^0.4.17;
+contract mortal {
+    address owner;
+    function mortal() public { owner = msg.sender; }
+    function kill() public { if (msg.sender == owner) selfdestruct(owner); }
+}
+contract greeter is mortal {
+    string greeting;
+    // constructor
+    function greeter(string _greeting) public {
+        greeting = _greeting;
+    }
+    // getter
+    function greet() public constant returns (string) {
+        return greeting;
+    }
+    //setter
+    function newGreeting(string _greeting) public {
+        greeting = _greeting;
+    }
+}
\ No newline at end of file
